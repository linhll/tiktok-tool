import styled from "@emotion/styled";
import {
  Button,
  Checkbox,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  FormControl,
  FormControlLabel,
  Input,
  InputAdornment,
  TextField,
  Typography,
  alpha,
} from "@mui/material";
import wallet from "@ui/api/wallet";
import { Provision } from "@ui/models/wallet";
import { fromCurrency, toCurrency } from "@ui/utils/formatter";
import { useState } from "react";

type Props = {
  open: boolean;
  onClose?: () => void;
};

export default function ProvisionDialog(props: Props) {
  return (
    <Dialog open={props.open}>
      <ProvisionDialogContent {...props} />
    </Dialog>
  );
}

const ProvisionDialogContent = (props: Props) => {
  const [amount, setAmount] = useState(100);
  const [loading, setLoading] = useState(false);
  const [provision, setProvision] = useState<Provision | null>(null);
  const [isAgree, setIsAgree] = useState(false);

  const canNext = amount >= 100 && isAgree;

  return (
    <>
      <DialogTitle>Ti·∫øp t·∫ø l∆∞∆°ng th·ª±c</DialogTitle>
      {provision ? (
        <DialogContent>
          <Typography>
            ƒê·ªÉ ti·∫øp t·∫ø l∆∞∆°ng th·ª±c cho t√†i kho·∫£n c·ªßa b·∫°n, vui l√≤ng chuy·ªÉn kho·∫£n
            t·ªõi t√†i kho·∫£n ng√¢n h√†ng v·ªõi c√°c th√¥ng tin sau:
          </Typography>
          <Typography
            color={(theme) => theme.palette.warning.main}
            component="div"
          >
            (L∆∞u √Ω: Kh√¥ng thay ƒë·ªïi b·∫•t k·ª≥ th√¥ng tin chuy·ªÉn kho·∫£n n√†o b√™n d∆∞·ªõi ƒë·ªÉ
            tr√°nh x·∫£y ra c√°c s·ª± c·ªë kh√¥ng mong mu·ªën. Mi·ªÖn ph√≠ x·ª≠ l√Ω s·ª± c·ªë do l·ªói
            ph·∫ßn m·ªÅm.)
          </Typography>
          <div style={{ display: "flex" }}>
            <BankingInfoContainer>
              <Row>
                <Typography mr={1} minWidth={80} component="span">
                  T√™n NH:{" "}
                </Typography>
                <Typography component="span" fontWeight={700}>
                  Ng√¢n h√†ng {provision.banking_account.bank_name}
                </Typography>
              </Row>
              <Row>
                <Typography mr={1} minWidth={80} component="span">
                  S·ªë TK:{" "}
                </Typography>
                <Typography component="span" fontWeight={700}>
                  {provision.banking_account.no}
                </Typography>
              </Row>
              <Row>
                <Typography mr={1} minWidth={80} component="span">
                  T√™n TK:{" "}
                </Typography>
                <Typography component="span" fontWeight={700}>
                  {provision.banking_account.name}
                </Typography>
              </Row>
              <Row>
                <Typography mr={1} minWidth={80} component="span">
                  S·ªë ti·ªÅn:{" "}
                </Typography>
                <Typography
                  component="span"
                  fontWeight={700}
                  color={(theme) => theme.palette.success.main}
                >
                  {toCurrency(provision.banking_amount)}ƒë
                </Typography>
              </Row>
              <Row>
                <Typography mr={1} minWidth={80} component="span">
                  N·ªôi dung CK:{" "}
                </Typography>
                <Typography component="span" fontWeight={700}>
                  {provision.banking_content}
                </Typography>
              </Row>
            </BankingInfoContainer>
            <QRImg src={provision.qr_url} />
          </div>
        </DialogContent>
      ) : (
        <DialogContent>
          <Typography>
            Nh·∫≠p s·ªë l∆∞∆°ng th·ª±c mu·ªën ti·∫øp t·∫ø (t·ªëi thi·ªÉu 100 ü•î):
          </Typography>
          <TextField
            sx={{ width: "100%" }}
            disabled={loading}
            variant="outlined"
            size="small"
            name="amount"
            placeholder="Amount"
            margin="normal"
            inputProps={{
              style: {
                textAlign: "right",
              },
            }}
            InputProps={{
              sx: {
                fontSize: "2em",
              },
              endAdornment: (
                <InputAdornment position="end">
                  <Typography component="span" fontSize="1.25em">
                    ü•î
                  </Typography>
                </InputAdornment>
              ),
            }}
            value={toCurrency(amount)}
            onChange={(ev) => {
              const strValue = ev.currentTarget.value;
              const value = Math.max(100, fromCurrency(strValue));

              setAmount(value);
            }}
          />
          <Typography textAlign="right">
            T∆∞∆°ng ƒë∆∞∆°ng:{" "}
            <Typography
              fontWeight={600}
              component="span"
              color={(theme) => theme.palette.success.main}
            >
              {toCurrency(amount * 1000)} ƒë
            </Typography>
          </Typography>
          <Typography
            color={(theme) => theme.palette.warning.main}
            component="div"
          >
            L∆∞u √Ω:
            <div>- T·ª∑ l·ªá quy ƒë·ªïi l∆∞∆°ng th·ª±c: 1.000ƒë = 1 ü•î.</div>
            <div>
              - L·ªánh ti·∫øp t·∫ø l∆∞∆°ng th·ª±c c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong ƒëa 72 gi·ªù
              sau khi chuy·ªÉn kho·∫£n th√†nh c√¥ng.
            </div>
            <div>
              - N·∫øu sau 72 gi·ªù m√† s·ªë l∆∞∆°ng th·ª±c c·ªßa b·∫°n ch∆∞a ƒë∆∞·ª£c c·∫≠p nh·∫≠t, vui
              l√≤ng li√™n h·ªá SƒêT:{" "}
              <Typography
                component="span"
                color={(theme) => theme.palette.primary.main}
              >
                0582110512
              </Typography>{" "}
              ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.
            </div>
            <div>
              - Ch√∫ng t√¥i kh√¥ng gi·∫£i quy·∫øt c√°c s·ª± c·ªë li√™n quan ƒë·∫øn c√°c l·ªói do
              chuy·ªÉn kho·∫£n sai t√™n ng√¢n h√†ng, s·ªë t√†i kho·∫£n, t√™n t√†i kho·∫£n ho·∫∑c
              c√°c giao d·ªãch kh√¥ng c√≥ trong l·ªãch s·ª≠ giao d·ªãch t·∫°i ng√¢n h√†ng c·ªßa
              ch√∫ng t√¥i.
            </div>
          </Typography>
          <FormControlLabel
            control={
              <Checkbox
                size="small"
                checked={isAgree}
                onChange={(e, checked) => setIsAgree(checked)}
              />
            }
            label="T√¥i ƒë√£ ƒë·ªçc v√† ƒë·ªìng √Ω v·ªõi c√°c n·ªôi dung tr√™n."
          />
        </DialogContent>
      )}
      <DialogActions>
        {!provision ? (
          <Button
            variant="outlined"
            color="error"
            onClick={props.onClose}
            size="small"
          >
            ƒê√≥ng
          </Button>
        ) : null}
        <Button
          disabled={!canNext || loading}
          onClick={() => {
            if (!provision) {
              setLoading(true);
              wallet
                .createProvision(amount)
                .then(setProvision)
                .finally(() => {
                  setLoading(false);
                });
              return;
            }
            props.onClose?.();
          }}
          size="small"
          variant="contained"
          color="success"
        >
          {provision ? "Xong" : "Ti·∫øp t·ª•c"}
        </Button>
      </DialogActions>
    </>
  );
};

const QRImg = styled.img`
  width: 200px;
  height: 200px;
  margin-left: ${({ theme }) => theme.spacing(3)};
  align-self: center;
`;

const Row = styled.div`
  display: flex;
  padding: ${({ theme }) => theme.spacing(1)} 0px;
`;

const BankingInfoContainer = styled.div`
  flex: 1;
  margin: ${({ theme }) => theme.spacing(2)} 0;
  padding: ${({ theme }) => theme.spacing(2)};
  border-radius: ${({ theme }) => theme.spacing(1)};
  border: 1px solid ${({ theme }) => alpha(theme.palette.success.main, 0.5)};
`;
