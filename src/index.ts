import { app, BrowserWindow, ipcMain, net, protocol } from "electron";
import pie from "puppeteer-in-electron";
import { loginTiktokAds } from "./main/browser";
import WindowManager from "./main/window-manager";
import AcceptBCHandler from "./main/accept-bc-handler";
import { machineIdSync } from "node-machine-id";
import path, { resolve } from "path";
import windowStateKeeper from "electron-window-state";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  const mainWindowState = windowStateKeeper({
    defaultWidth: 800,
    defaultHeight: 600,
  });
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    minHeight: 600,
    minWidth: 800,
    height: mainWindowState.height,
    width: mainWindowState.width,
    titleBarStyle: "hidden",
    titleBarOverlay: {
      color: "#1976d200",
      symbolColor: "#ffffff",
    },
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webSecurity: false,
      allowRunningInsecureContent: true,
    },
  });

  mainWindowState.manage(mainWindow);

  // mainWindow.webContents.session.set

  WindowManager.setMainWindow(mainWindow);

  mainWindow.webContents.session.webRequest.onHeadersReceived(
    (details, callback) => {
      callback({
        responseHeaders: {
          ...details.responseHeaders,
          "Content-Security-Policy": [
            "default-src 'self' 'unsafe-eval' 'unsafe-inline' data: http: https: static:;",
          ],
        },
      });
    }
  );

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (process.env.NODE_ENV === "development") {
    // Open the DevTools.
    mainWindow.webContents.openDevTools();
  }
  mainWindow.setMenu(null);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  // ipcMain.handle()
  ipcMain.handle("login-tiktok-ads", loginTiktokAds);
  ipcMain.handle("bypass-captcha-response", (ev, data) => {
    AcceptBCHandler.emitter.emit("bypass-captcha-response", data);
  });
  ipcMain.handle("get-device-id", (ev) => {
    return machineIdSync();
  });

  // Customize protocol to handle static resource.
  protocol.handle("static", (request) => {
    const fileUrl = request.url.replace("static://", "assets");
    const filePath = path.join(app.getAppPath(), ".webpack/renderer", fileUrl);
    return net.fetch(filePath);
  });

  createWindow();
});

async function initialize() {
  await pie.initialize(app);
}
initialize();

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
